using ConnectingApp.API.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ConnectingApp.API.Data
{
    public class AuthRepository : IAuthRepository
    {
        private readonly DataContext _ctx;

        public AuthRepository(DataContext ctx)
        {
            _ctx = ctx;
        }
        public async Task<User> Login(string userName, string password)
        {
            // we get the the user
            var user = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == userName);
            // if user doesnt exist
            if (user == null)
                return null;

            // now we comapare the password hash
            if (!VerifyPassword(password, user.PasswordHash, user.PasswordSalt))
                return null;

            // else means password is amtched so we'll return the user
            return user;
        }

        private bool VerifyPassword(string password, byte[] passwordHash, byte[] passwordSalt)
        {
            // first we get the value by using key (salt)
            using (var hashed = new System.Security.Cryptography.HMACSHA512(passwordSalt))
            {
                // now we compute the hash value for user entered password by passing the password
                var computeHash = hashed.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));

                // now we compare the hashed generated by user entered password that is 'computeHash'
                // with the db hashed value that is 'hashed'
                for (int i = 0; i < computeHash.Length; i++)
                {
                    if (computeHash[i] != passwordHash[i])
                        return false;
                }

            }
            // if password match then return true;
            return true;
        }

        public async Task<User> Register(User user, string password)
        {
            byte[] hashPassword, key;

            // we'll call this method to get hashed password
            CreateHashPassword(password, out hashPassword, out key);

            // now we'll set user values
            user.PasswordHash = hashPassword;
            user.PasswordSalt = key;
            await _ctx.Users.AddAsync(user);
            await _ctx.SaveChangesAsync();

            return user;
            
        }

        private void CreateHashPassword(string password, out byte[] hashPassword, out byte[] key)
        {
            using (var hashedPassword = new System.Security.Cryptography.HMACSHA512())
            {
                key = hashedPassword.Key;
                hashPassword = hashedPassword.ComputeHash(System.Text.Encoding.UTF8.GetBytes(password));
            }
        }

        public async Task<bool> UserExist(string userName)
        {
            var user = await _ctx.Users.FirstOrDefaultAsync(u => u.UserName == userName);
            if (user == null)
                return false;
            return true;
        }
    }
}
